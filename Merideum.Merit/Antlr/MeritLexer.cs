//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Merit.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Merideum.Merit.Antlr {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class MeritLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		IMPORT=1, ASSIGN=2, DOT=3, OUTPUT=4, CONST=5, VAR=6, DEPENDENCY_NAME=7, 
		IDENTIFIER=8, COLON=9, CAPITAL_LETTER=10, LETTER=11, INTEGER=12, WS=13;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"IMPORT", "ASSIGN", "DOT", "OUTPUT", "CONST", "VAR", "DEPENDENCY_NAME", 
		"IDENTIFIER", "COLON", "CAPITAL_LETTER", "LETTER", "INTEGER", "DIGIT", 
		"WS"
	};


	public MeritLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MeritLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'import'", "'='", "'.'", "'output'", "'const'", "'var'", null, 
		null, "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "IMPORT", "ASSIGN", "DOT", "OUTPUT", "CONST", "VAR", "DEPENDENCY_NAME", 
		"IDENTIFIER", "COLON", "CAPITAL_LETTER", "LETTER", "INTEGER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Merit.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MeritLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,13,103,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,1,0,
		1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
		4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,5,6,62,8,6,10,6,
		12,6,65,9,6,1,7,1,7,3,7,69,8,7,1,7,1,7,1,7,5,7,74,8,7,10,7,12,7,77,9,7,
		1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,5,11,87,8,11,10,11,12,11,90,9,11,1,
		11,3,11,93,8,11,1,12,1,12,1,13,4,13,98,8,13,11,13,12,13,99,1,13,1,13,0,
		0,14,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,0,27,
		13,1,0,5,1,0,65,90,2,0,65,90,97,122,1,0,49,57,1,0,48,57,3,0,9,10,13,13,
		32,32,111,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
		0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
		1,0,0,0,0,23,1,0,0,0,0,27,1,0,0,0,1,29,1,0,0,0,3,36,1,0,0,0,5,38,1,0,0,
		0,7,40,1,0,0,0,9,47,1,0,0,0,11,53,1,0,0,0,13,57,1,0,0,0,15,68,1,0,0,0,
		17,78,1,0,0,0,19,80,1,0,0,0,21,82,1,0,0,0,23,92,1,0,0,0,25,94,1,0,0,0,
		27,97,1,0,0,0,29,30,5,105,0,0,30,31,5,109,0,0,31,32,5,112,0,0,32,33,5,
		111,0,0,33,34,5,114,0,0,34,35,5,116,0,0,35,2,1,0,0,0,36,37,5,61,0,0,37,
		4,1,0,0,0,38,39,5,46,0,0,39,6,1,0,0,0,40,41,5,111,0,0,41,42,5,117,0,0,
		42,43,5,116,0,0,43,44,5,112,0,0,44,45,5,117,0,0,45,46,5,116,0,0,46,8,1,
		0,0,0,47,48,5,99,0,0,48,49,5,111,0,0,49,50,5,110,0,0,50,51,5,115,0,0,51,
		52,5,116,0,0,52,10,1,0,0,0,53,54,5,118,0,0,54,55,5,97,0,0,55,56,5,114,
		0,0,56,12,1,0,0,0,57,63,3,19,9,0,58,62,3,21,10,0,59,62,5,95,0,0,60,62,
		3,25,12,0,61,58,1,0,0,0,61,59,1,0,0,0,61,60,1,0,0,0,62,65,1,0,0,0,63,61,
		1,0,0,0,63,64,1,0,0,0,64,14,1,0,0,0,65,63,1,0,0,0,66,69,3,21,10,0,67,69,
		5,95,0,0,68,66,1,0,0,0,68,67,1,0,0,0,69,75,1,0,0,0,70,74,3,21,10,0,71,
		74,5,95,0,0,72,74,3,25,12,0,73,70,1,0,0,0,73,71,1,0,0,0,73,72,1,0,0,0,
		74,77,1,0,0,0,75,73,1,0,0,0,75,76,1,0,0,0,76,16,1,0,0,0,77,75,1,0,0,0,
		78,79,5,58,0,0,79,18,1,0,0,0,80,81,7,0,0,0,81,20,1,0,0,0,82,83,7,1,0,0,
		83,22,1,0,0,0,84,88,7,2,0,0,85,87,3,25,12,0,86,85,1,0,0,0,87,90,1,0,0,
		0,88,86,1,0,0,0,88,89,1,0,0,0,89,93,1,0,0,0,90,88,1,0,0,0,91,93,5,48,0,
		0,92,84,1,0,0,0,92,91,1,0,0,0,93,24,1,0,0,0,94,95,7,3,0,0,95,26,1,0,0,
		0,96,98,7,4,0,0,97,96,1,0,0,0,98,99,1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,
		0,100,101,1,0,0,0,101,102,6,13,0,0,102,28,1,0,0,0,9,0,61,63,68,73,75,88,
		92,99,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Merideum.Merit.Antlr
